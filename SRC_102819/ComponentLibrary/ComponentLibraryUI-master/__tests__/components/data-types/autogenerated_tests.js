import React from 'react';
import { shallow } from 'enzyme';
import chai, { expect } from 'chai';
import chaiEnzyme from 'chai-enzyme';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';
import { Autogenerated } from '../../../src/components/data-types/autogenerated';

chai.use(chaiEnzyme());
chai.use(sinonChai);

describe('Autogenerated', () => {
  describe('render', () => {
    let props;
    beforeEach(() => {
      props = {columnValue:  {
        dataType:{name: "Autogenerated", subType: "Date Created"},
        value: "2017-02-17T07:35:54.066Z"}};
    });
    it('should render String', () => {
      props = {columnValue:  {
        dataType:{name: "Autogenerated", subType: "Material Code"},
        value: "MT0001"}};
      const wrapper = shallow(<Autogenerated {...props}/>);
      expect(wrapper).to.have.descendants('String');
    });

    it('should render date time if subtype is Date Created or Date Last Amended', () => {
      const wrapper = shallow(<Autogenerated {...props}/>);
      expect(wrapper).to.have.descendants('DateTime');
    });

    context('editable is true', () => {
      it('should render input', () => {
        props.columnValue.editable = true;
        const wrapper = shallow(<Autogenerated {...props}/>);
        expect(wrapper).to.have.descendants('input');
      });

      it('should render column value in formatted way if sub type is Date Created or Date Last Amended', () => {
        props.columnValue.editable = true;
        const wrapper = shallow(<Autogenerated {...props}/>);
        expect(wrapper).to.have.descendants('input');
        expect(wrapper.find('input')).to.have.prop('value','17/2/2017 13:5:54');
      });

      it('input should have prop disabled is true', () => {
        props.columnValue.editable = true;
        const wrapper = shallow(<Autogenerated {...props}/>);
        expect(wrapper.find('input')).to.have.prop('disabled',true);
      });

      it('should render text box if column value has editable and filterable as true', () => {
        props.columnValue.editable = true;
        props.columnValue.filterable = true;
        const wrapper = shallow(<Autogenerated {...props}/>);
        expect(wrapper.find('input')).to.not.have.prop('disabled');
      });

      it('should call onChange when input is changed and column value has editable and filterable as true', () => {
        props.columnValue.editable = true;
        props.columnValue.filterable = true;
        props.onChange = sinon.spy();
        const wrapper = shallow(<Autogenerated {...props}/>);
        wrapper.find('input').simulate('change', {target: {value: 'test'}});
        expect(props.onChange).to.have.been.calledWith('test');
      });
    });
  })
});
