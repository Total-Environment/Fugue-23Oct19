import chai, {expect} from 'chai';
import React from 'react';
import { shallow } from 'enzyme';
import chaiEnzyme from 'chai-enzyme';
import DataType from '../../../src/components/data-types';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';
import {MoneyConnector} from '../../../src/components/data-types/money';

chai.use(chaiEnzyme());
chai.use(sinonChai);

describe('DataType', () => {
  describe('render', () => {
    let props;
    beforeEach(() => {
      props = {
        columnName: "Sample",
        columnValue: {
          value: 1,
          dataType: {
            name: "String",
            subType: ""
          },
          validity: {isValid: true, msg: ""}
        },
        onChange: sinon.spy(),
      };
    });
    it('should render the right datatype', () => {
      ['Unit', 'Range', 'Array', 'String', 'CheckList', 'StaticFile', 'Default', 'Boolean', 'Autogenerated','MasterData', 'Int', 'Decimal', 'Brand', 'Project'].forEach((dataType) => {
        props.columnValue.dataType.name = dataType;
        const wrapper = shallow(<DataType {...props}/>);
        expect(wrapper).to.have.descendants(dataType);
      });
    });
    it('should render MoneyConnector if datatype is money', () => {
      props.columnValue.dataType.name = "Money";
      const wrapper = shallow(<DataType {...props}/>);
      expect(wrapper.contains(<MoneyConnector {...props}/>)).to.equal(true);
    });

    it('should render the right datatype for Date', () => {
        props.columnValue.dataType.name = 'Date';
        const wrapper = shallow(<DataType {...props}/>);
        expect(wrapper).to.have.descendants('DatePicker');
    });
    it('should render - when value is undefined and editable is falsey',()=>{
      props.columnValue.value = undefined;
      const wrapper = shallow(<DataType {...props}/>);
      expect(wrapper).to.have.text('-');
    });

    it('should render - when value is undefined and editable is falsey',()=>{
      props.columnValue.value = undefined;
      const wrapper = shallow(<DataType {...props}/>);
      expect(wrapper).to.have.text('-');
    });

    it('should forward onChange from underlying dataType', () => {
      const wrapper = shallow(<DataType {...props}/>);
      wrapper.find('String').simulate('change','Sattar');
      expect(props.onChange).to.have.been.calledWith('Sattar');
    });

    it('should show a message when data is not valid', () => {
      props = {
        columnName: "Diameter", columnValue: {
          "value": {value: 3, type: 'mm'},
          "dataType": {
            "name": "Unit",
            "subType": ""
          },
          editable: true,
          validity: {isValid: false, msg: "Only numbers are allowed."},
        },
        onChange: sinon.spy(),
      };
      const wrapper = shallow(<DataType {...props}/>);
      expect(wrapper).to.include.text("Only numbers are allowed.");
    });

    it('should not show a message when data is valid', () => {
      props = {
        columnName: "Diameter", columnValue: {
          "value": {value: 3, type: 'mm'},
          "dataType": {
            "name": "String",
            "subType": ""
          },
          editable: true,
          validity: {isValid: true, msg: "Only numbers are allowed."},
        },
        onChange: sinon.spy(),
      };
      const wrapper = shallow(<DataType {...props}/>);
      expect(wrapper).to.not.include.text("Only numbers are allowed.");
    });

    it('should not show a message when data is valid and editable is false', () => {
      props = {
        columnName: "Diameter", columnValue: {
          "value": {value: 3, type: 'mm'},
          "dataType": {
            "name": "String",
            "subType": ""
          },
          editable: false,
          validity: {isValid: true, msg: "Only numbers are allowed."},
        },
        onChange: sinon.spy(),
      };
      const wrapper = shallow(<DataType {...props}/>);
      expect(wrapper).to.not.include.text("Only numbers are allowed.");
    });

    it('should not show a message when data is not valid and editable is false', () => {
      props = {
        columnName: "Diameter", columnValue: {
          "value": {value: 3, type: 'mm'},
          "dataType": {
            "name": "String",
            "subType": ""
          },
          editable: false,
          validity: {isValid: false, msg: "Only numbers are allowed."},
        },
        onChange: sinon.spy(),
      };
      const wrapper = shallow(<DataType {...props}/>);
      expect(wrapper).to.not.include.text("Only numbers are allowed.");
    });

  });
});
