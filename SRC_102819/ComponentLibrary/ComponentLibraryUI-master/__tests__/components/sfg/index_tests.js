import React from 'react';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';
import chai, {expect} from 'chai';
import {shallow} from 'enzyme';
import chaiEnzyme from 'chai-enzyme';
import {Sfg, __RewireAPI__ as SfgRewired} from "../../../src/components/sfg/index";
import {getHeader} from "../../../src/helpers";

chai.use(chaiEnzyme());
chai.use(sinonChai);

describe('sfg', () => {
  describe('render', () => {
    it('should render error message when error exist', () => {
      let props = {error: 'Sfg data not found'};
      let wrapper = shallow(<Sfg {...props}/>);
      expect(wrapper).to.have.descendants('h3');
      expect(wrapper.find('h3')).to.have.text('Sfg data not found');
    });

    it('should render data', () => {
      const props = {
        details: {
          isFetching: false, values: {
            "headers": [
              {
                "columns": [
                  {
                    "dataType": {
                      "name": "MasterData",
                      "subType": "5928079ac40d552a14321a2d"
                    },
                    "key": "sfg_level_1",
                    "name": "SFG Level 1",
                    "value": "FLOORING | DADO | PAVIOUR"
                  },
                  {
                    "dataType": {
                      "name": "MasterData",
                      "subType": "5928079ac40d552a14321a2e"
                    },
                    "key": "sfg_level_2",
                    "name": "SFG Level 2",
                    "value": "Flooring"
                  },
                  {
                    "dataType": {
                      "name": "MasterData",
                      "subType": "5928079ac40d552a14321a2f"
                    },
                    "key": "sfg_level_3",
                    "name": "SFG Level 3",
                    "value": "Natural Stone"
                  },
                  {
                    "dataType": {
                      "name": "MasterData",
                      "subType": "5928079ac40d552a14321a30"
                    },
                    "key": "sfg_level_4",
                    "name": "SFG Level 4",
                    "value": "Italian Marble"
                  },
                  {
                    "dataType": {
                      "name": "MasterData",
                      "subType": "5928079ac40d552a14321a31"
                    },
                    "key": "sfg_level_5",
                    "name": "SFG Level 5",
                    "value": null
                  },
                  {
                    "dataType": {
                      "name": "MasterData",
                      "subType": "5928079bc40d552a14321a32"
                    },
                    "key": "sfg_level_6",
                    "name": "SFG Level 6",
                    "value": null
                  },
                  {
                    "dataType": {
                      "name": "MasterData",
                      "subType": "5928079bc40d552a14321a33"
                    },
                    "key": "sfg_level_7",
                    "name": "SFG Level 7",
                    "value": null
                  }
                ],
                "key": "classification",
                "name": "Classification"
              },
              {
                "columns": [
                  {
                    "dataType": {
                      "name": "Autogenerated",
                      "subType": "SFG Code"
                    },
                    "key": "sfg_code",
                    "name": "SFG Code",
                    "value": "FLR000006"
                  },
                  {
                    "dataType": {
                      "name": "String",
                      "subType": null
                    },
                    "key": "unit_of_measure",
                    "name": "Unit Of Measure",
                    "value": "23"
                  },
                  {
                    "dataType": {
                      "name": "String",
                      "subType": null
                    },
                    "key": "hsn_code",
                    "name": "HSN Code",
                    "value": null
                  },
                  {
                    "dataType": {
                      "name": "MasterData",
                      "subType": "590c5a94c40d554e2c3c53fb"
                    },
                    "key": "sfg_status",
                    "name": "SFG Status",
                    "value": "Inactive"
                  }
                ],
                "key": "general",
                "name": "General"
              },
              {
                columns: [
                  {
                    key: "sfg_level_1_definition",
                    name: "SFG Level 1 Definition",
                    value: "value for sgf level 1"
                  }
                ],
                key: 'classification_definition',
                name: 'Classification Definition'
              }
            ],
            componentComposition: 'componentComposition'
          }
        },
        cost: 'cost',
      };
      const expected = props.details.values.headers.filter(header => header.key !== "classification_definition");
      const wrapper = shallow(<Sfg {...props}/>);
      expect(wrapper).to.have.descendants('Component');
      expect(wrapper.find('Component')).to.have.prop('details').deep.equal({headers: expected});
      expect(wrapper.find('Component')).to.have.prop('composition', 'componentComposition');
      expect(wrapper.find('Component')).to.have.prop('classificationDefinition').deep.equal(getHeader(props.details.values,'classification_definition'));
      expect(wrapper.find('Component')).to.have.prop('cost', 'cost');
      expect(wrapper.find('Component')).to.have.prop('componentLocation', 'Bangalore');
    });

    it('should render data if sfgCostError exist with cost data', () => {
      const props = {
        details: {isFetching: false, values: {componentComposition: 'composition'}},
        cost: 'cost',
        sfgCostError: 'error has occurred',
      };
      const wrapper = shallow(<Sfg {...props}/>);
      expect(wrapper).to.have.descendants('Component');
    });

  });

  describe('componentDidMount', () => {
    it('should be able to call onSfgFetchRequest from componentDidMount', () => {
      let props = {
        details: null,
        onSfgFetchRequest: sinon.spy(),
        onSfgCostFetchRequest: sinon.spy(),
        sfgCode: 'SFG001'
      };

      let sfg = new Sfg(props);
      sfg.componentDidMount();
      expect(props.onSfgFetchRequest).to.have.been.calledWith('SFG001');
    });

    it('should be able to call onSfgCostFetchRequest from componentDidMount', () => {
      let props = {
        details: null,
        onSfgFetchRequest: sinon.spy(),
        onSfgCostFetchRequest: sinon.spy(),
        sfgCode: 'SFG001'
      };

      let sfg = new Sfg(props);
      sfg.componentDidMount();
      expect(props.onSfgCostFetchRequest).to.have.been.called;
    });
  });

  describe('componentWillUnmount', () => {
    it('should be able to call onSfgDestroy when componentWillUnmount is called', () => {
      let props = {
        details: "details data",
        onSfgDestroy: sinon.spy(),
        sfgCode: 'SFG001'
      };

      var sfg = new Sfg(props);
      sfg.componentWillUnmount();
      expect(props.onSfgDestroy).to.have.been.called;
    });
  });

});
