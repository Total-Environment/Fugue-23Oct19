import {FilterComponent, __RewireAPI__ as FilterComponentRewired} from '../../../src/components/filter-component';
import {shallow} from "enzyme";
import chai, {expect} from 'chai';
import chaiEnzyme from 'chai-enzyme';
import React from 'react';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';

chai.use(chaiEnzyme());
chai.use(sinonChai);

describe('Filter Component', () => {
  describe('render', () => {
    let props,onApplySpy;
    beforeEach(() => {
      onApplySpy = sinon.spy();
      props = {
        enums: {
          GENERIC_BRAND: 'Generic Brand'
        },
        dependencyDefinitions:{
          materialClassifications:{},
        },
        definitions: {
          'clay': {
            headers: [
              {
                name: 'Classification',
                key: 'classification',
                columns: [
                  {
                    name: 'Material Level 1',
                    dataType: {
                      name: 'MasterData',
                      subType: 'MasterDataId'
                    },
                    key: 'material_level_1',
                    isRequired: false
                  }
                ]
              },
              {
                name: 'General',
                key: 'general',
                columns: [
                  {
                    name: 'HSN Code',
                    dataType: {
                      name: 'String',
                      subType: null
                    },
                    key: 'hsn_code',
                    isRequired: false
                  }
                ]
              },
            ]
          }
        },
        brandDefinitions:{
          name:'Generic Brand',
          columns:[{
            "dataType": {
              "name": "Autogenerated",
              "subType": "Brand Code"
            },
            "isRequired": false,
            "isSearchable": false,
            "key": "brand_code",
            "name": "Brand Code"
          }]

        },
        componentType: 'material',
        group: 'clay',
        onApply:onApplySpy,
        errorInFilter:{message:'',shown:false}
      }
    });
    it('should render model with title as Filters', () => {
      const wrapper = shallow(<FilterComponent {...props}/>);
      expect(wrapper).to.have.descendants('Modal');
      expect(wrapper.find('h1')).to.have.text('Filters');
    });

    it('should have className filter dialog', () => {
      FilterComponentRewired.__Rewire__('styles', {filterDialog: 'filter styles'});
      const wrapper = shallow(<FilterComponent {...props}/>);
      expect(wrapper).to.have.className('filter styles');
    });

    it('should render close icon', () => {
      FilterComponentRewired.__Rewire__({close: 'close'});
      const wrapper = shallow(<FilterComponent {...props}/>);
      expect(wrapper.find('Icon')).to.have.className('close');
    });

    it('should render apply button', () => {
      const wrapper = shallow(<FilterComponent {...props}/>);
      expect(wrapper.find('#apply')).to.have.text('Apply');
    });

    it('close button should call onClose function', () => {
      const onCloseSpy = sinon.spy();
      const preventDefaultSpy = sinon.spy();
      props.onClose = onCloseSpy;
      const wrapper = shallow(<FilterComponent {...props}/>);
      wrapper.find('#close').simulate('click', {preventDefault: preventDefaultSpy});
      expect(onCloseSpy).to.have.been.called;
    });

    it('should render loading when definitions of the group does not exist', () => {
      props.definitions = {};
      const wrapper = shallow(<FilterComponent {...props}/>);
      expect(wrapper).to.have.descendants('Loading');
    });

    it('should render header columns with added editable field when definition is present', () => {
      const wrapper = shallow(<FilterComponent {...props}/>);
      const expected = {
        headers: [
          {
            columns: [
              {
                name: 'Material Level 1',
                key: 'material_level_1',
                dataType: {name: 'MasterData', subType: 'MasterDataId'}, value: null,
                isRequired: false,
                editable: true,
                filterable: true,
                validity: {isValid: true, msg: ''},
                isClassification: true
              }
            ],
            name: 'Classification',
            key: 'classification'
          },
          {
            columns: [
              {
                name: 'HSN Code',
                dataType: {name: 'String', subType: null},
                value: null,
                isRequired: false,
                editable: true,
                filterable: true,
                validity: {isValid: true, msg: ''},
                key: 'hsn_code',
                isClassification: false
              }
            ],
            name: 'General',
            key: 'general'
          }
        ]
      };
      expect(wrapper).to.have.descendants('FilterDataComponent');
      expect(wrapper.find('FilterDataComponent')).to.have.prop('definition');
      expect(wrapper.find('FilterDataComponent')).to.have.prop('definition').deep.equal(expected);
    });

    it('should not render static file data type', () => {
      props = {
        dependencyDefinitions:{
          materialClassifications:{}
        },
        definitions: { 'clay': {headers: [
          {
            name: 'General',
            key: 'general',
            columns: [
              {
                name: 'HSN Code',
                dataType: {
                  name: 'StaticFile',
                  subType: null
                },
                isRequired: false,
                key:'hsn_code',
              },
              {
                name: 'Material Name',
                dataType: {
                  name: 'String',
                  subType: null
                },
                isRequired: false,
                key:'material_name',
              },
            ]
          },
        ]}
        },
        componentType: 'material',
        group: 'clay',
        errorInFilter:{message:'',shown:false}
      };
      const expected = {
        headers: [
          {
            columns: [
              {
                name: 'Material Name',
                dataType: {name: 'String', subType: null},
                value: null,
                isRequired: false,
                editable: true,
                filterable: true,
                validity: {isValid: true, msg: ''},
                key:'material_name',
                isClassification: false
              }
            ],
            name: 'General',
            key: 'general'
          }
        ]
      };
      const wrapper = shallow(<FilterComponent {...props}/>);
      expect(wrapper).to.have.descendants('FilterDataComponent');
      expect(wrapper.find('FilterDataComponent')).to.have.prop('definition').deep.equal(expected);
    });

    it('should not render array of static file data type', () => {
      props = {
        dependencyDefinitions:{
          materialClassifications:{}
        },
        definitions: {'clay': {headers: [
          {
            name: 'General',
            key: 'general',
            columns: [
              {
                name: 'HSN Code',
                dataType: {
                  name: 'Array',
                  subType: {
                    name: 'StaticFile',
                    subType: null
                  }
                },
                isRequired: false,
                key:'hsn_code'
              },
              {
                name: 'Material Name',
                dataType: {
                  name: 'String',
                  subType: null
                },
                isRequired: false,
                key:'material_name'
              },
            ]
          },
        ]}},
        componentType: 'material',
        group: 'clay',
        errorInFilter:{message:'',shown:false}
      };
      const expected = {
        headers: [
          {
            columns: [
              {
                name: 'Material Name',
                dataType: {name: 'String', subType: null},
                value: null,
                isRequired: false,
                editable: true,
                filterable: true,
                validity: {isValid: true, msg: ''},
                key:'material_name',
                isClassification: false
              }
            ],
            name: 'General',
            key: 'general'
          }
        ]
      };
      const wrapper = shallow(<FilterComponent {...props}/>);
      expect(wrapper).to.have.descendants('FilterDataComponent');
      expect(wrapper.find('FilterDataComponent')).to.have.prop('definition').deep.equal(expected);
    });

    it('should not render checklist data type', () => {
      props = {
        dependencyDefinitions:{
          materialClassifications:{}
        },
        definitions: {'clay': {headers: [
          {
            name: 'General',
            key: 'general',
            columns: [
              {
                name: 'HSN Code',
                dataType: {
                  name: 'CheckList',
                  subType: null
                },
                isRequired: false,
                key:'hsn_code'
              },
              {
                name: 'Material Name',
                dataType: {
                  name: 'String',
                  subType: null
                },
                isRequired: false,
                key:'material_name'
              },
            ]
          },
        ]}},
        componentType: 'material',
        group: 'clay',
        errorInFilter:{message:'',shown:false}
      };
      const expected = {
        headers: [
          {
            columns: [
              {
                name: 'Material Name',
                dataType: {name: 'String', subType: null},
                value: null,
                isRequired: false,
                editable: true,
                filterable: true,
                validity: {isValid: true, msg: ''},
                key:'material_name',
                isClassification: false
              }
            ],
            name: 'General',
            key: 'general'
          }
        ]
      };
      const wrapper = shallow(<FilterComponent {...props}/>);
      expect(wrapper).to.have.descendants('FilterDataComponent');
      expect(wrapper.find('FilterDataComponent')).to.have.prop('definition').deep.equal(expected);
    });

    it('should not render maintenance header', () => {
      props = {
        dependencyDefinitions:{
          materialClassifications:{}
        },
        definitions: {'clay':{ headers: [
          {
            name: 'Maintenance',
            key: 'maintenance',
            columns: [
              {
                name: 'HSN Code',
                dataType: {
                  name: 'CheckList',
                  subType: null
                },
                isRequired: false,
                key:'hsn_code'
              },
              {
                name: 'Material Name',
                dataType: {
                  name: 'String',
                  subType: null
                },
                isRequired: false,
                key:'material_name'
              },
            ]
          },
        ]}},
        componentType: 'material',
        group: 'clay',
        errorInFilter:{message:'',shown:false}
      };
      const expected ={headers: []};
      const wrapper = shallow(<FilterComponent {...props}/>);
      expect(wrapper).to.have.descendants('FilterDataComponent');
      expect(wrapper.find('FilterDataComponent')).to.have.prop('definition').deep.equal(expected);
    });

    it('should not render system logs header', () => {
      props = {
        dependencyDefinitions:{
          materialClassifications:{}
        },
        definitions: {'clay':{headers: [
          {
            name: 'System Logs',
            key: 'system_logs',
            columns: [
              {
                name: 'HSN Code',
                dataType: {
                  name: 'CheckList',
                  subType: null
                },
                isRequired: false,
                key:'hsn_code',
                isClassification: false
              },
              {
                name: 'Material Name',
                dataType: {
                  name: 'String',
                  subType: null
                },
                isRequired: false,
                key:'material_name',
                isClassification: false
              },
            ]
          },
        ]}},
        componentType: 'material',
        group: 'clay',
        errorInFilter:{message:'',shown:false}
      };
      const expected = {headers: []};
      const wrapper = shallow(<FilterComponent {...props}/>);
      expect(wrapper).to.have.descendants('FilterDataComponent');
      expect(wrapper.find('FilterDataComponent')).to.have.prop('definition').deep.equal(expected);
    });

    it('should render Filter data component having prop definition with changed data when column value got changed',() => {
      const wrapper = shallow(<FilterComponent {...props}/>);
      const expected = {
        headers: [
          {
            columns: [
              {
                name: 'Material Level 1',
                key: 'material_level_1',
                dataType: {name: 'MasterData', subType: 'MasterDataId'}, value: null,
                isRequired: false,
                editable: true,
                filterable: true,
                validity: {isValid: true, msg: ''},
                isClassification: true
              }
            ],
            name: 'Classification',
            key: 'classification'
          },
          {
            columns: [
              {
                name: 'HSN Code',
                dataType: {name: 'String', subType: null},
                value: '12345',
                isRequired: false,
                editable: true,
                filterable: true,
                validity: {isValid: true, msg: ''},
                key:'hsn_code',
                isClassification: false
              }
            ],
            name: 'General',
            key: 'general'
          }
        ]
      };
      wrapper.find('FilterDataComponent').simulate('columnChange','general','hsn_code','12345');
      expect(wrapper.find('FilterDataComponent')).to.have.prop('definition').deep.equal(expected);
    });

    it('onApply should be called with modified filer data',() => {
      const wrapper = shallow(<FilterComponent {...props}/>);
      const expected = {
        headers: [
          {
            columns: [
              {
                name: 'Material Level 1',
                key: 'material_level_1',
                dataType: {name: 'MasterData', subType: 'MasterDataId'}, value: null,
                isRequired: false,
                editable: true,
                filterable: true,
                validity: {isValid: true, msg: ''},
                isClassification: true
              }
            ],
            name: 'Classification',
            key: 'classification'
          },
          {
            columns: [
              {
                name: 'HSN Code',
                dataType: {name: 'String', subType: null},
                value: '12345',
                isRequired: false,
                editable: true,
                filterable: true,
                validity: {isValid: true, msg: ''},
                key:'hsn_code',
                isClassification: false
              }
            ],
            name: 'General',
            key: 'general'
          }
        ]
      };
      wrapper.find('FilterDataComponent').simulate('columnChange','general','hsn_code','12345');
      wrapper.find('#apply').simulate('click',{preventDefault: sinon.spy()});
      expect(onApplySpy).to.be.calledWith(expected);
    });
  });

  describe('componentDidMount', () => {
    it('should call onMaterialDefinitionFetch for materials when definition of the group is not present and group is present', () => {
      const componentDefinitionSpy = sinon.spy();
      const brandDefinitionSpy = sinon.spy();
      const props = {
        componentType: 'material',
        onMaterialDefinitionFetch: componentDefinitionSpy,
        onBrandDefinitionFetch: brandDefinitionSpy,
        group: 'clay',
        definitions: {},
        dependencyDefinitions:{
          materialClassifications:{}
        },
        errorInFilter:{message:'',shown:false}
      };
      const wrapper = shallow(<FilterComponent {...props}/>);
      wrapper.instance().componentDidMount();
      expect(componentDefinitionSpy).to.have.been.calledWith('clay');
      expect(brandDefinitionSpy).to.have.been.called;
    });

    it('should not call onComponentDefinitionFetch for materials when definition of the group is present', () => {
      const definitions = {
       'clay':{ headers: [
          {
            name: 'Maintenance',
            columns: [
              {
                name: 'HSN Code',
                dataType: {
                  name: 'CheckList',
                  subType: null
                },
                isRequired: false
              },
              {
                name: 'material name',
                dataType: {
                  name: 'String',
                  subType: null
                },
                isRequired: false
              },
            ]
          },
        ]},
      };
      const componentDefinitionSpy = sinon.spy();
      const props = {
        componentType: 'material',
        onMaterialDefinitionFetch: componentDefinitionSpy,
        group: 'clay',
        definitions: definitions,
        dependencyDefinitions:{
          materialClassifications:{}
        },
        errorInFilter:{message:'',shown:false}
      };
      const wrapper = shallow(<FilterComponent {...props}/>);
      wrapper.instance().componentDidMount();
      expect(componentDefinitionSpy).to.not.have.been.called;
    });

    it('should call onServiceDefinitionFetch for services when definition of the group is not present and group is present', () => {
      const componentDefinitionSpy = sinon.spy();
      const props = {
        componentType: 'service',
        onServiceDefinitionFetch: componentDefinitionSpy,
        group: 'clay',
        definitions: {},
        dependencyDefinitions:{
          serviceClassifications:{}
        },
        errorInFilter:{message:'',shown:false}
      };
      const wrapper = shallow(<FilterComponent {...props}/>);
      wrapper.instance().componentDidMount();
      expect(componentDefinitionSpy).to.have.been.calledWith('clay');
    });

    it('should call onPackageDefinitionFetch for package when definition of package is not present', () => {
      const componentDefinitionSpy = sinon.spy();
      const props = {
        componentType: 'package',
        onPackageDefinitionFetch: componentDefinitionSpy,
        definitions: {},
        dependencyDefinitions:{
          packageClassifications:{}
        },
        errorInFilter:{message:'',shown:false}
      };
      const wrapper = shallow(<FilterComponent {...props}/>);
      wrapper.instance().componentDidMount();
      expect(componentDefinitionSpy).to.have.been.calledWith();

    });

    it('should not call onServiceDefinitionFetch for services when definition of the group is present', () => {
      const definitions = {
        'clay':{ headers: [
          {
            name: 'Maintenance',
            columns: [
              {
                name: 'HSN Code',
                dataType: {
                  name: 'CheckList',
                  subType: null
                },
                isRequired: false
              },
              {
                name: 'material name',
                dataType: {
                  name: 'String',
                  subType: null
                },
                isRequired: false
              },
            ]
          },
        ]},
      };
      const componentDefinitionSpy = sinon.spy();
      const props = {
        componentType: 'service',
        onServiceDefinitionFetch: componentDefinitionSpy,
        group: 'clay',
        definitions: definitions,
        dependencyDefinitions:{
          serviceClassifications:{}
        },
        errorInFilter:{message:'',shown:false}
      };
      const wrapper = shallow(<FilterComponent {...props}/>);
      wrapper.instance().componentDidMount();
      expect(componentDefinitionSpy).to.not.have.been.called;
    });
  });
});
