import { Unit } from './unit';
import { Range } from './range';
import { Array } from './array';
import { DateTime, DatePicker } from './date-time';
import { String } from './string';
import { CheckList } from './check-list';
import { StaticFile } from './static-file';
import { Default } from './default';
import { Boolean } from './boolean';
import { Autogenerated } from './autogenerated';
import { MasterData } from './master-data'
import { MoneyConnector } from './money';
import { Int } from './int';
import { Decimal } from './decimal';
import { Constant } from './constant';
import React from "react";
import { helpText, helpTextError } from '../../css-common/forms.css';
import classNames from 'classnames';
import styles from './index.css';
import { Brand, AddBrand } from "./brand";
import {Project} from "./project";
import {PermissionedForNonComponents} from "../../permissions/permissions";
import {getBrandPermissions, getComponentViewPermissions} from "../../permissions/ComponentPermissions";

const dataTypes = {
  Unit,
  Range,
  Array,
  Date: DatePicker,
  Money: MoneyConnector,
  DatePicker,
  String,
  CheckList,
  StaticFile,
  Default,
  Boolean,
  Autogenerated,
  MasterData,
  Int,
  Decimal,
  Constant,
  Brand,
  Project
};

export default class DataType extends React.Component {
  renderHelpText() {
    return <p className={classNames(helpText, helpTextError)}> {this.props.columnValue.validity.msg}</p>;
  }

  render() {
    let DataTypeComponent = dataTypes[this.props.columnValue.dataType !== undefined && this.props.columnValue.dataType.name] || dataTypes["Default"];
    if ((this.props.columnValue.value === undefined || this.props.columnValue.value === null) && !this.props.columnValue.editable) {
      if (this.props.columnValue.dataType.name === "Array" && this.props.columnValue.dataType.subType.name === "Brand") {
        return <span>
          <PermissionedForNonComponents allowedPermissions={getBrandPermissions({params: { brandCode:'new'}})}>
            <AddBrand {...this.props} />
          </PermissionedForNonComponents>;
        </span>
      } else {
        return <span>-</span>;
      }
    }

    if (this.props.columnValue.editable && !this.props.columnValue.validity.isValid) {
      return <span>
        <DataTypeComponent {...this.props}
          className={styles.help} />
        {this.renderHelpText()}
      </span>
    }
    if (this.props.columnValue.dataType.name === "Array" && this.props.columnValue.dataType.subType.name === "Brand") {
      return <span>
        <PermissionedForNonComponents allowedPermissions={getComponentViewPermissions('material')}>
        <DataTypeComponent {...this.props} columnValue={Object.assign({}, this.props.columnValue, { editable: false })} />
        </PermissionedForNonComponents>
        <PermissionedForNonComponents allowedPermissions={getBrandPermissions({params: { brandCode:'new'}})}>
        <AddBrand {...this.props} />
        </PermissionedForNonComponents>
      </span>;
    }
    if(this.props.columnValue.dataType.name === "Money") {
      return <span>
      <MoneyConnector {...this.props} />
    </span>;
    }
    return <span>
      <DataTypeComponent {...this.props} />
    </span>
  }
}
