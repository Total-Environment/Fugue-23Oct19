using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using TE.ComponentLibrary.ComponentLibrary.Domain;
using TE.ComponentLibrary.ComponentLibrary.Domain.DataTypes;

namespace TE.ComponentLibrary.ComponentLibrary.ComponentMasters.Infrastructure.Controller.Dto
{
    /// <summary>
    /// Represents a data type dto.
    /// </summary>
    public class SimpleDataTypeDto
    {
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>The name.</value>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the type of the sub.
        /// </summary>
        /// <value>The type of the sub.</value>
        public object SubType { get; set; }

        /// <summary>
        /// Sets the domain.
        /// </summary>
        /// <param name="dataType">Type of the data.</param>
        public void SetDomain(ISimpleDataType dataType)
        {
            Name = dataType.GetType().Name.Replace("DataType", "");
            switch (Name)
            {
                case "String":
                    SubType = null;
                    break;

                case "Constant":
                    SubType = ((ConstantDataType)dataType).Value;
                    break;

                case "MasterData":
                    SubType = ((MasterDataDataType)dataType).DataList.Id;
                    break;

                case "Int":
                    SubType = null;
                    break;

                case "Boolean":
                    SubType = null;
                    break;

                case "Decimal":
                    SubType = null;
                    break;

                case "Date":
                    SubType = null;
                    break;

                case "Unit":
                    SubType = ((UnitDataType)dataType).Value;
                    break;

                case "Array":
                    var subType = new DataTypeDto();
                    subType.SetDomain(((ArrayDataType)dataType).DataType);
                    SubType = JObject.FromObject(subType).ToObject<Dictionary<string, object>>();
                    break;

                case "CheckList":
                    SubType = null;
                    break;

                case "StaticFile":
                    SubType = null;
                    break;

                case "Autogenerated":
                    SubType = ((AutogeneratedDataType)dataType).SubType;
                    break;

                case "Brand":
                    SubType = ((BrandDataType)dataType).BrandCodePrefix;
                    break;

                case "Range":
                    SubType = ((RangeDataType)dataType).Unit;
                    break;

                default:
                    SubType = null;
                    break;
            }
        }

        /// <summary>
        /// Gets the domain.
        /// </summary>
        /// <param name="factory">The factory.</param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public async Task<ISimpleDataType> GetDomain(ISimpleDataTypeFactory factory)
        {
            switch (Name)
            {
                case "Array":
                    DataTypeDto subTypeDto;
                    if (SubType is JObject)
                    {
                        subTypeDto = ((JObject)SubType).ToObject<DataTypeDto>();
                    }
                    else if (SubType is Dictionary<string, object>)
                    {
                        subTypeDto = JObject.FromObject((Dictionary<string, object>)SubType).ToObject<DataTypeDto>();
                    }
                    else
                    {
                        throw new ArgumentException();
                    }
                    var subType = await factory.Construct(subTypeDto.Name, subTypeDto.SubType);
                    return await factory.Construct("Array", subType);

                default:
                    return await factory.Construct(Name, SubType);
            }
        }
    }
}