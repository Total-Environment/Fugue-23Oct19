using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace TE.ComponentLibrary.ComponentLibrary.Domain.DataTypes
{
    /// <summary>
    /// Represents a type for auto generated data column types.
    /// </summary>
    /// <seealso cref="IDataType"/>
    public class AutogeneratedDataType : ISimpleDataType
    {
        private static readonly IDictionary<string, Func<IComponent, object>> DataTypeResolvers = new Dictionary
            <string, Func<IComponent, object>>
            {
                {
                    "Material Code",
                    data =>
                        new Dictionary<string, object>
                        {
                            {
                                "DataType",
                                new Dictionary<string, object> {{"Name", "Autogenerated"}, {"SubType", "Material Code"}}
                            },
                            {
                                "key","material_code"
                            },
                            {"Value", data.Id}
                        }
                },
                {
                    "Date Created",
                    data =>
                        new Dictionary<string, object>
                        {
                            {
                                "DataType",
                                new Dictionary<string, object> {{"Name", "Autogenerated"}, {"SubType", "Date Created"}}
                            },
                            {
                                "key","date_created"
                            },
                            {"Value", data.CreatedAt}
                        }
                },
                {
                    "Date Last Amended",
                    data =>
                        new Dictionary<string, object>
                        {
                            {
                                "DataType",
                                new Dictionary<string, object> {{"Name", "Autogenerated"}, {"SubType", "Date Last Amended"}}
                            },
                            {
                                "key","date_last_amended"
                            },
                            {"Value", data.AmendedAt}
                        }
                },
                {
                    "Created by",
                    data =>
                        new Dictionary<string, object>
                        {
                            {
                                "DataType",
                                new Dictionary<string, object> {{"Name", "Autogenerated"}, {"SubType", "Created by"}}
                            },
                            {
                                "key","created_by"
                            },
                            {"Value", data.CreatedBy}
                        }
                },
                {
                    "Last Amended by",
                    data =>
                        new Dictionary<string, object>
                        {
                            {
                                "DataType",
                                new Dictionary<string, object> {{"Name", "Autogenerated"}, {"SubType", "Last Amended by"}}
                            },
                            {
                                "key","last_amended_by"
                            },
                            {"Value", data.AmendedBy}
                        }
                },
                {
                    "Service Code",
                    data =>
                        new Dictionary<string, object>
                        {
                            {
                                "DataType",
                                new Dictionary<string, object> {{"Name", "Autogenerated"}, {"SubType", "Service Code"}}
                            },
                            {
                                "key","service_code"
                            },
                            {"Value", data.Id}
                        }
                },
                {
                    "Brand Code",
                    data =>
                        new Dictionary<string, object>
                        {
                            {
                                "DataType",
                                new Dictionary<string, object> {{"Name", "Autogenerated"}, {"SubType", "Brand Code"}}
                            },
                            {
                                "key","brand_code"
                            },
                            {"Value", data.Id}
                        }
                },
                 {
                    "SFG Code",
                    data =>
                        new Dictionary<string, object>
                        {
                            {
                                "DataType",
                                new Dictionary<string, object> {{"Name", "Autogenerated"}, {"SubType", "SFG Code"}}
                            },
                            {
                                "key","sfg_code"
                            },
                            {"Value", data.Id}
                        }
                }
            };

        private static readonly IDictionary<string, Func<IComponent, object>> Resolvers = new Dictionary
            <string, Func<IComponent, object>>
            {
                {"Material Code", data => data.Id},
                {"Date Created", data => data.CreatedAt},
                {"Date Last Amended", data => data.AmendedAt},
                {"Created by", data => data.CreatedBy},
                {"Last Amended by", data => data.AmendedBy},
                {"Service Code", data => data.Id},
                {"Brand Code", data => data.Id},
                {"SFG Code", data => data.Id},
                {"Package Code", data => data.Id}
            };

        /// <summary>
        /// Initializes a new instance of the <see cref="AutogeneratedDataType"/> class.
        /// </summary>
        /// <param name="subType">Type of the sub.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// null;Expected one of {string.Join(", ", validSubTypes)}. Got {subType}.
        /// </exception>
        public AutogeneratedDataType(string subType)
        {
            var validSubTypes = Resolvers.Keys.ToList().Select(s => s.ToLower()).ToList();
            if (!validSubTypes.Contains(subType.ToLower()))
                throw new ArgumentOutOfRangeException(null,
                    $"Expected one of {string.Join(", ", validSubTypes)}. Got {subType}.");
            SubType = subType;
        }

        /// <summary>
        /// Gets the type of the sub.
        /// </summary>
        /// <value>The type of the sub.</value>
        public string SubType { get; }

        /// <summary>
        /// Resolves the specified material data with data type
        /// </summary>
        /// <param name="component"></param>
        /// <returns></returns>
        public object DataTypeResolve(IComponent component)
        {
            return DataTypeResolvers[SubType](component);
        }

        /// <inheritdoc/>
        public Task<object> Parse(object columnData)
        {
            return Task.FromResult<object>(null);
        }

        /// <summary>
        /// Resolves the specified material data.
        /// </summary>
        /// <param name="material">The material data.</param>
        /// <returns></returns>
        public object Resolve(IComponent material)
        {
            return Resolvers[SubType](material);
        }
    }
}