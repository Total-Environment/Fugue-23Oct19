using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using MongoDB.Bson.Serialization.Attributes;
using TE.ComponentLibrary.ComponentLibrary.ComponentMasters.Infrastructure.Repository.Dao;
using TE.ComponentLibrary.ComponentLibrary.Domain;
using TE.ComponentLibrary.ComponentLibrary.RateMasters.Domain;
using TE.ComponentLibrary.ComponentLibrary.RateMasters.Infrastructure.Repository.Dao;

namespace TE.ComponentLibrary.ComponentLibrary.ServiceMasters.Infrastructure.Repository.Dao
{
    /// <summary>
    /// Class ServiceDao.
    /// </summary>
    /// <seealso cref="Entity"/>
    [BsonSerializer(typeof(ServiceDaoSerializer))]
    public class ServiceDao : ComponentDao
    {
        /// <summary>
        /// The service code
        /// </summary>
        public const string ServiceCode = "service_code";

        /// <summary>
        /// The rates
        /// </summary>
        public const string Rates = "rates";

        /// <summary>
        /// The general
        /// </summary>
        public const string General = "general";

        /// <summary>
        /// The unit of measure
        /// </summary>
        public const string UnitOfMeasure = "unit_of_measure";

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceDao"/> class.
        /// </summary>
        public ServiceDao()
        {
            Columns = new Dictionary<string, object>();
            ComponentDaoCode = ServiceCode;
        }

        // ///
        // <summary>
        // /// Gets or sets the service identifier. ///
        // </summary>
        // ///
        // <value>/// The service identifier. ///</value>
        // public string ServiceId { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceDao"/> class.
        /// </summary>
        /// <param name="service">The service data.</param>
        public ServiceDao(Service service) : this()
        {
            SetDomain(service);
        }

        /// <summary>
        /// Gets the domain.
        /// </summary>
        /// <param name="serviceDefinitionRepository">The service definition repository.</param>
        /// <returns>Task&lt;Component&gt;.</returns>
        public async Task<Service> GetDomain(IComponentDefinitionRepository<IServiceDefinition> serviceDefinitionRepository)
        {
            var group = (string)Columns[ServiceLevel1];
            var serviceDefinition = await serviceDefinitionRepository.Find(group);

            var headers = serviceDefinition.Headers.Select(h =>
                new HeaderData(h.Name, h.Key)
                {
                    Columns = h.Columns.Select(c => new ColumnData(c.Name, c.Key, Columns[c.Key]))
                });

            var service = new Service(headers, (ServiceDefinition)serviceDefinition)
            {
                Id = Columns[ComponentDaoCode] == null ? "" : Columns[ComponentDaoCode].ToString(),
                Group = (string)Columns[ServiceLevel1],
                CreatedAt = (DateTime)Columns[DateCreated],
                AmendedAt = (DateTime)Columns[DateLastAmended],
                CreatedBy = (string)Columns[CreatedBy],
                AmendedBy = (string)Columns[LastAmendedBy]
            };
            service.AppendSearchKeywords((List<string>)Columns[SearchKeywords]);
            return service;
        }

        /// <summary>
        /// Sets the domain.
        /// </summary>
        /// <param name="service">The service.</param>
        public void SetDomain(IService service)
        {
            foreach (var headerDataDao in service.Headers)
                foreach (var columnDataDao in headerDataDao.Columns)
                    Columns[columnDataDao.Key] = columnDataDao.Value;
            SetAutogeneratedValues(service);
            SetSearchKeywords(service);
        }

        private void SetAutogeneratedValues(IService service)
        {
            Columns[ComponentDaoCode] = service.Id;
            Columns[CreatedBy] = service.CreatedBy;
            Columns[DateCreated] = service.CreatedAt;
            Columns[DateLastAmended] = service.AmendedAt;
            Columns[LastAmendedBy] = service.AmendedBy;
        }

        private void SetSearchKeywords(IService service)
        {
            Columns[SearchKeywords] = service.SearchKeywords?.ToList();
        }

        /// <summary>
        /// Adds the material rate to material DAO.
        /// </summary>
        /// <param name="serviceRate">The service rate.</param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public ServiceRateDao AddRate(ServiceRateDao serviceRate)
        {
            if (!Columns.ContainsKey(Rates))
                Columns.Add(Rates, new List<ServiceRateDao>());

            var rates = (List<ServiceRateDao>)Columns[Rates];

            if (rates.Contains(serviceRate))
            {
                throw new DuplicateResourceException(
                    $"This Service Rate is already defined for serviceId: {Columns[ServiceCode]}, location: {serviceRate.AppliedOn}, appliedOn: {serviceRate.Location}");
            }

            rates.Add(serviceRate);
            return serviceRate;
        }

        /// <summary>
        /// Gets the rates.
        /// </summary>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public List<ServiceRateDao> GetRateDaos()
        {
            if (!Columns.ContainsKey(Rates))
                Columns.Add(Rates, new List<ServiceRateDao>());

            return (List<ServiceRateDao>)Columns[Rates];
        }
    }
}