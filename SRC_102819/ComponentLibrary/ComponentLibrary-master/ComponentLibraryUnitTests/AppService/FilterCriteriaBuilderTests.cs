using System;
using System.Collections.Generic;
using FluentAssertions;
using Moq;
using TE.ComponentLibrary.ComponentLibrary.AppService;
using TE.ComponentLibrary.ComponentLibrary.ComponentMasters.Infrastructure.Repository.Dao;
using TE.ComponentLibrary.ComponentLibrary.Domain;
using TE.ComponentLibrary.ComponentLibrary.Domain.DataTypes;
using Xunit;

namespace TE.ComponentLibrary.ComponentLibrary.UnitTests.AppService
{
    public class FilterCriteriaBuilderTests
    {
        [Fact]
        public void BuildWithMaterialDefinition_ShouldConsiderArrayOfStringtDataType_WhenValueIsNotEmpty()
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new ArrayDataType(new StringDataType()));
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };

            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("column", "value") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column._v").Should().Be(true);
            filterCriteria["column._v"].Item1.Should().Be("Regex");
            filterCriteria["column._v"].Item2.Should().Be("/(value)/i");
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldConsiderArrayOfStringtDataType_WhenValueIsNotEmpty()
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new ArrayDataType(new StringDataType()));
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };

            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("column", "value") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column._v").Should().Be(true);
            filterCriteria["column._v"].Item1.Should().Be("Regex");
            filterCriteria["column._v"].Item2.Should().Be("/(value)/i");
        }

        [Fact]
        public void BuildWithMaterialDefinition_ShouldConsiderAutoGeneratedDataTypeOfMaterialCode_WhenValueIsNotEmpty()
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("Material Code", "material code", new AutogeneratedDataType("Material Code"));
            var headerDefinition = new HeaderDefinition("Header", "Header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("material code", "Abc") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("material code").Should().Be(true);
            filterCriteria["material code"].Item1.Should().Be("Regex");
            filterCriteria["material code"].Item2.Should().Be("((?i)Abc(?-i))");
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldConsiderAutoGeneratedDataTypeOfMaterialCode_WhenValueIsNotEmpty()
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("Material Code", "material code", new AutogeneratedDataType("Material Code"));
            var headerDefinition = new HeaderDefinition("Header", "Header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("material code", "Abc") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("material code").Should().Be(true);
            filterCriteria["material code"].Item1.Should().Be("Regex");
            filterCriteria["material code"].Item2.Should().Be("((?i)Abc(?-i))");
        }

        [Fact]
        public void BuildWithMaterialDefinition_ShouldConsiderBolleanDataType_WhenValueIsNotEmpty()
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new BooleanDataType());
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("column", "true") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column").Should().Be(true);
            filterCriteria["column"].Item1.Should().Be("Eq");
            filterCriteria["column"].Item2.Should().Be(true);
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldConsiderBolleanDataType_WhenValueIsNotEmpty()
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new BooleanDataType());
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("column", "true") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column").Should().Be(true);
            filterCriteria["column"].Item1.Should().Be("Eq");
            filterCriteria["column"].Item2.Should().Be(true);
        }

        [Fact]
        public void BuildWithMaterialDefinition_ShouldConsiderDecimalDataType_WhenValueIsNotEmpty()
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new DecimalDataType());
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });

            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("column", "2") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column._v").Should().Be(true);
            filterCriteria["column._v"].Item1.Should().Be("Eq");
            filterCriteria["column._v"].Item2.Should().Be(20000);
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldConsiderDecimalDataType_WhenValueIsNotEmpty()
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new DecimalDataType());
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("column", "2") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column._v").Should().Be(true);
            filterCriteria["column._v"].Item1.Should().Be("Eq");
            filterCriteria["column._v"].Item2.Should().Be(20000);
        }

        [Fact]
        public void BuildWithMaterialDefinition_ShouldConsiderGroupForFilterCriteria_WhenGroupIsNotEmpty()
        {
            var materialDefinition = new Mock<IMaterialDefinition>();
            materialDefinition.Setup(m => m.Headers).Returns(new List<IHeaderDefinition>());
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition.Object, brandDefinition, new List<FilterData>(), "clay", new List<string> { "cla", "mat" });
            filterCriteria.ContainsKey(ComponentDao.MaterialLevel2).Should().Be(true);
            filterCriteria[ComponentDao.MaterialLevel2].Item1.Should().Be("Regex");
            filterCriteria[ComponentDao.MaterialLevel2].Item2.Should().Be("((?i)clay(?-i))");
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldConsiderGroupForFilterCriteria_WhenGroupIsNotEmpty()
        {
            var serviceDefinition = new Mock<IServiceDefinition>();
            serviceDefinition.Setup(m => m.Headers).Returns(new List<IHeaderDefinition>());
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition.Object, new List<FilterData>(), "clay", new List<string> { "cla", "mat" });
            filterCriteria.ContainsKey(ComponentDao.ServiceLevel1).Should().Be(true);
            filterCriteria[ComponentDao.ServiceLevel1].Item1.Should().Be("Regex");
            filterCriteria[ComponentDao.ServiceLevel1].Item2.Should().Be("((?i)clay(?-i))");
        }

        [Fact]
        public void BuildWithMaterialDefinition_ShouldConsiderIntDataType_WhenValueIsNotEmpty()
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new IntDataType());
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("column", "2") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column").Should().Be(true);
            filterCriteria["column"].Item1.Should().Be("Eq");
            filterCriteria["column"].Item2.Should().Be(2);
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldConsiderIntDataType_WhenValueIsNotEmpty()
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new IntDataType());
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("column", "2") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column").Should().Be(true);
            filterCriteria["column"].Item1.Should().Be("Eq");
            filterCriteria["column"].Item2.Should().Be(2);
        }

        [Fact]
        public void BuildWithMaterialDefinition_ShouldConsiderMasterDataType_WhenValueIsNotEmpty()
        {
            var serviceDefinition = new ServiceDefinition("test");
            var masterDataList = new MasterDataList("name", new List<MasterDataValue>());
            var colmnDefinition = new ColumnDefinition("Column", "column", new MasterDataDataType(masterDataList));
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("column", "Abc") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column").Should().Be(true);
            filterCriteria["column"].Item1.Should().Be("Regex");
            filterCriteria["column"].Item2.Should().Be("((?i)Abc(?-i))");
        }

        [Fact]
        public void BuildWithMaterialDefinition_ShouldConsiderMoneyDataType_WhenValueIsNotEmpty()
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "Column", new MoneyDataType());
            var headerDefinition = new HeaderDefinition("Header", "Header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };

            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("Column", "120 INR") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column.Amount").Should().Be(true);
            filterCriteria.ContainsKey("column.Currency").Should().Be(true);
            filterCriteria["column.Amount"].Item1.Should().Be("Eq");
            filterCriteria["column.Amount"].Item2.Should().Be(1200000);
            filterCriteria["column.Currency"].Item1.Should().Be("Regex");
            filterCriteria["column.Currency"].Item2.Should().Be("((?i)INR(?-i))");
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldConsiderMoneyDataType_WhenValueIsNotEmpty()
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "Column", new MoneyDataType());
            var headerDefinition = new HeaderDefinition("Header", "Header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("Column", "120 INR") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column.Amount").Should().Be(true);
            filterCriteria.ContainsKey("column.Currency").Should().Be(true);
            filterCriteria["column.Amount"].Item1.Should().Be("Eq");
            filterCriteria["column.Amount"].Item2.Should().Be(1200000);
            filterCriteria["column.Currency"].Item1.Should().Be("Regex");
            filterCriteria["column.Currency"].Item2.Should().Be("((?i)INR(?-i))");
        }

        [Fact]
        public void BuildWithMaterialDefition_ShouldConsiderRangeDataType_WhenValueIsNotEmpty()
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new RangeDataType("mm"));
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("column", "120") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column.From").Should().Be(true);
            filterCriteria.ContainsKey("column.To").Should().Be(true);
            filterCriteria["column.From"].Item1.Should().Be("Lte");
            filterCriteria["column.From"].Item2.Should().Be(120.0);
            filterCriteria["column.To"].Item1.Should().Be("Gte");
            filterCriteria["column.To"].Item2.Should().Be(120.0);
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldConsiderRangeDataType_WhenValueIsNotEmpty()
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new RangeDataType("mm"));
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("column", "120") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column.From").Should().Be(true);
            filterCriteria.ContainsKey("column.To").Should().Be(true);
            filterCriteria["column.From"].Item1.Should().Be("Lte");
            filterCriteria["column.From"].Item2.Should().Be(120.0);
            filterCriteria["column.To"].Item1.Should().Be("Gte");
            filterCriteria["column.To"].Item2.Should().Be(120.0);
        }

        [Fact]
        public void BuildWithMaterialDefinition_ShouldConsiderSearchKeywordsForFilterCriteria_WhenKeywordIsNotEmpty()
        {
            var materialDefinition = new Mock<IMaterialDefinition>();
            materialDefinition.Setup(m => m.Headers).Returns(new List<IHeaderDefinition>());
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition.Object, brandDefinition, new List<FilterData>(), "", new List<string> { "cla", "mat" });
            filterCriteria.ContainsKey($"{ComponentDao.SearchKeywords}._v").Should().Be(true);
            filterCriteria[$"{ComponentDao.SearchKeywords}._v"].Item1.Should().Be("Regex");
            filterCriteria[$"{ComponentDao.SearchKeywords}._v"].Item2.Should().Be("/(cla|mat)/i");
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldConsiderSearchKeywordsForFilterCriteria_WhenKeywordIsNotEmpty()
        {
            var serviceDefinition = new Mock<IServiceDefinition>();
            serviceDefinition.Setup(m => m.Headers).Returns(new List<IHeaderDefinition>());
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition.Object, new List<FilterData>(), "", new List<string> { "cla", "mat" });
            filterCriteria.ContainsKey($"{ComponentDao.SearchKeywords}._v").Should().Be(true);
            filterCriteria[$"{ComponentDao.SearchKeywords}._v"].Item1.Should().Be("Regex");
            filterCriteria[$"{ComponentDao.SearchKeywords}._v"].Item2.Should().Be("/(cla|mat)/i");
        }

        [Fact]
        public void BuildWithMaterialDefinition_ShouldConsiderStringDataType_WhenValueIsNotEmpty()
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new StringDataType());
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("column", "Abc") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column").Should().Be(true);
            filterCriteria["column"].Item1.Should().Be("Regex");
            filterCriteria["column"].Item2.Should().Be("((?i)Abc(?-i))");
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldConsiderStringDataType_WhenValueIsNotEmpty()
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new StringDataType());
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("column", "Abc") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column").Should().Be(true);
            filterCriteria["column"].Item1.Should().Be("Regex");
            filterCriteria["column"].Item2.Should().Be("((?i)Abc(?-i))");
        }

        [Fact]
        public void BuildWithMaterialDefinition_ShouldConsiderUnitDataType_WhenValueIsNotEmpty()
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new UnitDataType("mm"));
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("column", "23") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column.Value").Should().Be(true);
            filterCriteria["column.Value"].Item1.Should().Be("Eq");
            filterCriteria["column.Value"].Item2.Should().Be(23.0);
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldConsiderUnitDataType_WhenValueIsNotEmpty()
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "column", new UnitDataType("mm"));
            var headerDefinition = new HeaderDefinition("Header", "header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("column", "23") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column.Value").Should().Be(true);
            filterCriteria["column.Value"].Item1.Should().Be("Eq");
            filterCriteria["column.Value"].Item2.Should().Be(23.0);
        }

        [Fact]
        public void BuildWithMaterialDefinition_ShouldNotConsiderArrayOfNonStringDataType_WhenValueIsNotEmpty()
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "Column", new ArrayDataType(new StaticFileDataType()));
            var headerDefinition = new HeaderDefinition("Header", "Header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("Column", "value") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column._v").Should().Be(false);
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldNotConsiderArrayOfNonStringDataType_WhenValueIsNotEmpty()
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "Column", new ArrayDataType(new StaticFileDataType()));
            var headerDefinition = new HeaderDefinition("Header", "Header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("Column", "value") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column._v").Should().Be(false);
        }

        [Fact]
        public void BuildWithMaterialDefinition_ShouldNotConsiderConstantDataType_WhenValueIsNotEmpty()
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("column", "column", new ConstantDataType("column"));
            var headerDefinition = new HeaderDefinition("Header", "Header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("column", "Abc") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column").Should().Be(false);
        }

        [Fact]
        public void BuildWithServiceDefinition_ShouldNotConsiderConstantDataType_WhenValueIsNotEmpty()
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("column", "column", new ConstantDataType("column"));
            var headerDefinition = new HeaderDefinition("Header", "Header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var filterCriteria = filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("column", "Abc") }, "test", new List<string> { "test" });
            filterCriteria.ContainsKey("column").Should().Be(false);
        }

        [Theory]
        [InlineData("")]
        [InlineData("120")]
        [InlineData("INR")]
        [InlineData("120INR")]
        [InlineData("120 INR USD")]
        public void BuildWithMaterialDefinition_ShouldThrowArgumentException_WhenValueIsInvalid(string value)
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "Column", new MoneyDataType());
            var headerDefinition = new HeaderDefinition("Header", "Header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            Action act = () => filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("Column", value) }, "test", new List<string> { "test" });

            act.ShouldThrow<ArgumentException>().WithMessage("Invalid money value.");
        }

        [Theory]
        [InlineData("")]
        [InlineData("120")]
        [InlineData("INR")]
        [InlineData("120INR")]
        [InlineData("120 INR USD")]
        public void BuildWithServceDefinition_ShouldThrowArgumentException_WhenValueIsInvalid(string value)
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "Column", new MoneyDataType());
            var headerDefinition = new HeaderDefinition("Header", "Header", new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            Action act = () => filterCriteriaBuilder.Build(serviceDefinition, new List<FilterData>() { new FilterData("Column", value) }, "test", new List<string> { "test" });

            act.ShouldThrow<ArgumentException>().WithMessage("Invalid money value.");
        }

        [Theory]
        [InlineData("ABC")]
        [InlineData("")]
        public void BuildWithMaterialDefinition_ShouldThrowArgumentExceptionForIntDataType_WhenValueIsNotInteger(string value)
        {
            var materialDefinition = new MaterialDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "Column", new IntDataType());
            var headerDefinition = new HeaderDefinition("Header", "Header", new List<IColumnDefinition>() { colmnDefinition });
            materialDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var brandDefinition = new BrandDefinition("Generic Brands", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand/Series","Brand/Series", new StringDataType()),
                new SimpleColumnDefinition("3D Model","3D Model", new StaticFileDataType()),
                new SimpleColumnDefinition("Status", "Status", new MasterDataDataType(new MasterDataList("Status"))),
                new SimpleColumnDefinition("Warranty Period in Years", "Warranty Period in Years", new IntDataType())
            });
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            Action act = () => filterCriteriaBuilder.Build(materialDefinition, brandDefinition, new List<FilterData>() { new FilterData("Column", value) }, "test", new List<string> { "test" });
            act.ShouldThrow<ArgumentException>().WithMessage("Invalid int value.");
        }

        [Theory]
        [InlineData("ABC")]
        [InlineData("")]
        public void BuildWithServiceDefinition_ShouldThrowArgumentExceptionForIntDataType_WhenValueIsNotInteger(
            string value)
        {
            var serviceDefinition = new ServiceDefinition("test");
            var colmnDefinition = new ColumnDefinition("Column", "Column", new IntDataType());
            var headerDefinition = new HeaderDefinition("Header", "Header",
                new List<IColumnDefinition>() { colmnDefinition });
            serviceDefinition.Headers = new List<IHeaderDefinition>() { headerDefinition };
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            Action act =
                () =>
                    filterCriteriaBuilder.Build(serviceDefinition,
                        new List<FilterData>() { new FilterData("Column", value) }, "test", new List<string> { "test" });
            act.ShouldThrow<ArgumentException>().WithMessage("Invalid int value.");
        }

        [Fact]
        public void BuildRateFilters_ShouldCreateASetOfFiltersForRateRelatedValues_ReturnFilterCriteria()
        {
            var filterCriteriaBuilder = new FilterCriteriaBuilder();
            var appliedOn = DateTime.UtcNow;
            var date = $"{appliedOn:yyyy-MM-dd}T03:00:00+5:30";
            var filterData = new List<FilterData>
            {
                new FilterData("AppliedOn", date),
                new FilterData("Location", "Bangalore")
            };

            var result = filterCriteriaBuilder.BuildRateFilters(filterData, "material");

            result.Count.Should().Be(2);
            result.ContainsKey("rates._v.AppliedOn").Should().BeTrue();
            result["rates._v.AppliedOn"].Item1.Should().Be("Lte");
            result["rates._v.AppliedOn"].Item2.Should().Be(appliedOn.Date);
            result.ContainsKey("rates._v.Location").Should().BeTrue();
            result["rates._v.Location"].Item1.Should().Be("Eq");
            result["rates._v.Location"].Item2.Should().Be("Bangalore");
        }
    }
}