using System;
using FluentAssertions;
using Moq;
using TE.ComponentLibrary.ComponentLibrary.Domain;
using TE.ComponentLibrary.ComponentLibrary.Domain.DataTypes;
using Xunit;

namespace TE.ComponentLibrary.ComponentLibrary.UnitTests.DomainTests.DataTypes
{
	public class AutogeneratedDataTypeTests
	{
		[Fact]
		public void It_ShouldBeOfTypeIDataType()
		{
			var dt = new AutogeneratedDataType("Material Code");
			dt.Should().BeAssignableTo<IDataType>();
		}

		[Theory]
		[InlineData("Material Code")]
		[InlineData("Date Created")]
		[InlineData("Date Last Amended")]
		[InlineData("Created By")]
		[InlineData("Last Amended By")]
		public void New_ShouldReturnDataType_WhenCalledWithValidSubType(string subType)
		{
			var dt = new AutogeneratedDataType(subType);
			dt.Should().NotBeNull();
		}

		[Theory]
		[InlineData("Sattar")]
		public void New_ShouldThrowArgumentOutOfRangeException_WhenCalledWithInvalidSubType(string subType)
		{
			Action act = () => new AutogeneratedDataType(subType);
			act.ShouldThrow<ArgumentOutOfRangeException>()
				.WithMessage(
					$"Expected one of Material Code, Date Created, Date Last Amended, Created By, Last Amended By, Service Code, Brand Code, SFG Code, Package Code. Got {subType}.");
		}

		[Fact]
		public async void Parse_ShouldReturnNull_WhenPassedAnyData()
		{
			var dt = new AutogeneratedDataType("Material Code");
			(await dt.Parse(1)).Should().BeNull();
		}

		[Fact]
		public void Resolve_ShouldReturnValue_WhenPassedMaterial()
		{
			var dt = new AutogeneratedDataType("Material Code");
			var mockData = new Mock<IComponent>();
			const string id = "CLY0001";
			mockData.Setup(m => m.Id).Returns(id);
			dt.Resolve(mockData.Object).Should().Be(id);
		}
	}
}