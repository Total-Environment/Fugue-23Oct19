using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using FluentAssertions;
using Moq;
using TE.ComponentLibrary.ComponentLibrary.AppService;
using TE.ComponentLibrary.ComponentLibrary.ComponentMasters.Infrastructure.Repository;
using TE.ComponentLibrary.ComponentLibrary.Domain;
using TE.ComponentLibrary.ComponentLibrary.Domain.DataTypes;
using Xunit;

namespace TE.ComponentLibrary.ComponentLibrary.UnitTests.DomainTests
{
    public class MaterialDefinitionTests
    {
        [Fact]
        public void MaterialDefinition_ShouldHaveGroupAndHeaders()
        {
            const string group = "Clay";
            const string code = "CLY";
            var materialDefinition = new MaterialDefinition(group)
            {
                Code = code
            };

            materialDefinition.Code.Should().Be(code);
            materialDefinition.Name.Should().Be(group);
            materialDefinition.Headers.Should().Equal(new List<IHeaderDefinition>());
        }

        [Fact]
        public void MaterialDefinition_ShouldRaiseArgumentExceptionIfGroupIsNull()
        {
            Action act = () => new MaterialDefinition(null);
            act.ShouldThrow<ArgumentException>();
        }

        [Fact]
        public async void Parse_ShouldGeneraterKeywordsForAMAterial_ReturnUpdatedMaterial()
        {
            const string headerName = "headerDetails";
            var headerDictionary = new Dictionary<string, object>
            {
                {"group", "Clay"},
                {"name", "Clay Material 1"}
            };
            var data = new Dictionary<string, object>
            {
                {headerName, headerDictionary}
            };
            var headerDataMock = new Mock<IHeaderData>();
            headerDataMock.Setup(h => h.Name).Returns(headerName);
            headerDataMock.Setup(h => h.Columns).Returns(new List<IColumnData>
            {
                new ColumnData("Shade No", "Shade No",0),
                new ColumnData("Short Description", "Short Description","Soil Mezzune")
            });

            var brandDefinition = new BrandDefinition("Generic Brand", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand Code", "brand_code", new AutogeneratedDataType("Brand Code"), true),
                new SimpleColumnDefinition("Manufacturer's Name", "manufacturers_name", new StringDataType(), true),
                new SimpleColumnDefinition("Brand/Series", "brand_series", new StringDataType(), true),
                new SimpleColumnDefinition("Manufacturer's Code", "manufacturers_code", new StringDataType(), true),
                new SimpleColumnDefinition("Approved Vendors", "approved_vendors", new StringDataType())
            });
            var headerData = headerDataMock.Object;
            var mockHeaderDefinition = new Mock<IHeaderDefinition>();
            mockHeaderDefinition.Setup(m => m.Name).Returns(headerName);
            mockHeaderDefinition.Setup(h => h.Parse(headerDictionary)).ReturnsAsync(headerData);
            mockHeaderDefinition.Setup(h => h.Columns).Returns(new List<IColumnDefinition>
            {
                new ColumnDefinition("Shade No","Shade No", new IntDataType(), true),
                new ColumnDefinition("Short Description","Short Description",  new StringDataType(), true),
                new ColumnDefinition("Product Number","Product Number", new StringDataType(), false),
                new ColumnDefinition("Approved Brands", "approved_brands", new BrandDataType(brandDefinition, "BAC", new Mock<IBrandCodeGenerator>().Object, new Mock<ICounterRepository>().Object), true)
            });
            var materialDefinition = new MaterialDefinition("Clay")
            {
                Headers = new List<IHeaderDefinition> { mockHeaderDefinition.Object }
            };

            var material = await materialDefinition.Parse<Material>(data, brandDefinition);
            material[headerName].Should().Be(headerData);
            material.SearchKeywords.Count.Should().Be(2);
            material.SearchKeywords[0].Should().Be("0");
            material.SearchKeywords[1].Should().Be("Soil Mezzune");
        }

        [Fact]
        public async void Parse_ShouldReturnMaterial_WhenPassedMaterialDetailsAsDictionaryWithGroup()
        {
            const string headerName = "headerDetails";
            var headerDictionary = new Dictionary<string, object>
            {
                {"group", "Clay"},
                {"name", "Clay Material 1"}
            };
            var data = new Dictionary<string, object>
            {
                {headerName, headerDictionary}
            };

            var headerDataMock = new Mock<IHeaderData>();
            headerDataMock.Setup(h => h.Name).Returns(headerName);
            var headerData = headerDataMock.Object;
            var mockHeaderDefinition = new Mock<IHeaderDefinition>();
            mockHeaderDefinition.Setup(m => m.Name).Returns(headerName);
            mockHeaderDefinition.Setup(h => h.Parse(headerDictionary)).ReturnsAsync(headerData);
            var materialDefinition = new MaterialDefinition("Clay")
            {
                Headers = new List<IHeaderDefinition> { mockHeaderDefinition.Object }
            };

            var material = await materialDefinition.Parse<Material>(data, null);
            material[headerName].Should().Be(headerData);
        }

        /// <summary>
        /// Parses the should add brand data as search keywords update search keyword list.
        /// </summary>
        [Fact]
        public async void Parse_ShouldAddBrandDataAsSearchKeywords_UpdateSearchKeywordList()
        {
            const string headerName = "headerDetails";
            var headerDictionary = new Dictionary<string, object>
            {
                {"group", "Clay"},
                {"name", "Clay Material 1"}
            };
            var data = new Dictionary<string, object>
            {
                {headerName, headerDictionary}
            };
            var headerDataMock = new Mock<IHeaderData>();
            headerDataMock.Setup(h => h.Name).Returns(headerName);
            headerDataMock.Setup(h => h.Columns).Returns(new List<IColumnData>
            {
                new ColumnData("Approved Brands", "approved_brands", new List<Dictionary<string, object>>
                    {
                    new Dictionary<string, object>()
                {
                    { "brand_code", "BFX00002"},
                    { "manufacturers_name", "Parryware"},
                    { "brand_series", "Orissa 580"},
                    { "manufacturers_code", "C0117"},
                    { "approved_vendors", "3633, 4084, 1090"}
                }}),
                new ColumnData("Short Description", "short_description", "Soil Mezzune")
            });

            var brandDefinition = new BrandDefinition("Generic Brand", new List<ISimpleColumnDefinition>
            {
                new SimpleColumnDefinition("Brand Code", "brand_code", new AutogeneratedDataType("Brand Code"), true),
                new SimpleColumnDefinition("Manufacturer's Name", "manufacturers_name", new StringDataType(), true),
                new SimpleColumnDefinition("Brand/Series", "brand_series", new StringDataType(), true),
                new SimpleColumnDefinition("Manufacturer's Code", "manufacturers_code", new StringDataType(), true),
                new SimpleColumnDefinition("Approved Vendors", "approved_vendors", new StringDataType())
            });
            var headerData = headerDataMock.Object;
            var mockHeaderDefinition = new Mock<IHeaderDefinition>();
            mockHeaderDefinition.Setup(m => m.Name).Returns(headerName);
            mockHeaderDefinition.Setup(h => h.Parse(headerDictionary)).ReturnsAsync(headerData);
            mockHeaderDefinition.Setup(h => h.Columns).Returns(new List<IColumnDefinition>
            {
                new ColumnDefinition("Approved Brands", "approved_brands", new BrandDataType(brandDefinition, "BCL", new Mock<IBrandCodeGenerator>().Object, new Mock<ICounterRepository>().Object), true),
                new ColumnDefinition("Short Description", "short_description", new StringDataType(), true),
            });
            var materialDefinition = new MaterialDefinition("Clay")
            {
                Headers = new List<IHeaderDefinition> { mockHeaderDefinition.Object }
            };
            var material = await materialDefinition.Parse<Material>(data, brandDefinition);
            material[headerName].Should().Be(headerData);
            material.SearchKeywords.Count.Should().Be(5);
            material.SearchKeywords[0].Should().Be("BFX00002");
            material.SearchKeywords[1].Should().Be("Parryware");
            material.SearchKeywords[2].Should().Be("Orissa 580");
            material.SearchKeywords[3].Should().Be("C0117");
            material.SearchKeywords[4].Should().Be("Soil Mezzune");
        }

        [Fact]
        public void Parse_ShouldThrowArgumentException_WhenPassedMaterialDetailsWithoutDefinedHeader()
        {
            const string headerName = "sattar";
            var mockHeaderDefinition = new Mock<IHeaderDefinition>();
            mockHeaderDefinition.Setup(m => m.Name).Returns(headerName);
            var materialDefinition = new MaterialDefinition("Clay")
            {
                Headers = new List<IHeaderDefinition> { mockHeaderDefinition.Object }
            };
            var data = new Dictionary<string, object>
            {
                {"id", "CLY0001"},
                {"group", "Clay"}
            };
            Func<Task> act = async () => (await materialDefinition.Parse<Material>(data, null)).Headers.ToList();
            act.ShouldThrow<ArgumentException>().WithMessage($"{headerName} is required.");
        }

        [Fact]
        public void ParseMaterial_ShouldThrowArgumentException_WhenColumnNameDoesNotMatchWithDefinition()
        {
            const string headerName = "A";
            const string columnName = "B";
            var material = new Material
            {
                Headers = new List<IHeaderData>
                {
                    new HeaderData(headerName, headerName)
                    {
                        Columns = new List<IColumnData>
                        {
                            new ColumnData(columnName,columnName, "somevalue")
                        }
                    }
                }
            };

            var materialDefinition = new MaterialDefinition("Clay")
            {
                Headers = new List<IHeaderDefinition>
                {
                    new HeaderDefinition("A","A",  new List<IColumnDefinition>
                    {
                        new ColumnDefinition("C", "C", new StringDataType())
                    })
                }
            };

            Action action = () => materialDefinition.ParseComponent(material);

            action.ShouldThrow<ArgumentException>()
                .WithMessage("Invalid Column: no column found with name B under header A.");
        }

        [Fact]
        public void ParseMaterial_ShouldThrowArgumentException_WhenHeadersOfMaterialDoesNotMatchWithDefinition()
        {
            const string headerName = "A";
            var material = new Material
            {
                Headers = new List<IHeaderData>
                {
                    new HeaderData(headerName, headerName)
                }
            };

            var materialDefinition = new MaterialDefinition("Clay")
            {
                Headers = new List<IHeaderDefinition>
                {
                    new HeaderDefinition("B", "B",new List<IColumnDefinition>())
                }
            };

            Action action = () => materialDefinition.ParseComponent(material);

            action.ShouldThrow<ArgumentException>().WithMessage("Invalid header: no header found with name A.");
        }
    }
}